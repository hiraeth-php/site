[application]

	;
	; Aliases enable you to inform the dependency injector which concrete class should be built
	; to provide for a type-hinted interface.  If the interface does not exist, a built in php
	; class alias will be generated as an alias for the class.
	;

	aliases = {
		"Doctrine\ORM\EntityManagerInterface": "Doctrine\ORM\EntityManager"
	}

	;
	; Delegates are mini-factories for the dependency injector.  They provide all the information
	; required to register with dependency injector as being capable of building a particular class
	; and contain all the requisite logic for building that class, including any configuration
	; settings logic.
	;

	delegates = [
		"Hiraeth\Doctrine\EntityManagerDelegate",
		"Hiraeth\Doctrine\HydratorDelegate"
	]

	;
	; Providers can be thought of as hooks which receive an object instance of a particular
	; interface once it has been created by the dependecy injector.  From here, it can call the
	; methods assured in that interface to conitnue configuring or setting up the instances.  Like
	; delegates, providers contain all the requisite information inside the class, so they merely
	; need to be registered.
	;

	providers = [
		"Hiraeth\Doctrine\ApplicationProvider"
	]

[doctrine]

	;
	; Hydrator config
	;

	[&.hydrator]

		filters = {
			"string"   : "Hiraeth\Doctrine\StringFilter",
			"text"     : "Hiraeth\Doctrine\StringFilter",
			"float"    : "Hiraeth\Doctrine\NumericFilter",
			"decimal"  : "Hiraeth\Doctrine\NumericFilter",
			"integer"  : "Hiraeth\Doctrine\NumericFilter",
			"smallint" : "Hiraeth\Doctrine\NumericFilter",
			"bigint"   : "Hiraeth\Doctrine\StringFilter",
			"date"     : "Hiraeth\Doctrine\DateTimeFilter",
			"time"     : "Hiraeth\Doctrine\DateTimeFilter",
			"datetime" : "Hiraeth\Doctrine\DateTimeFilter",
			"timestamp": "Hiraeth\Doctrine\DateTimeFilter",
			"boolean"  : "Hiraeth\Doctrine\BooleanFilter",
			"file"     : "Hiraeth\Doctrine\FileFilter"
		}

[console]

	commands = {
		"orm:generate:proxies":   "Hiraeth\Doctrine\GenerateProxiesCommand",
		"orm:schema-tool:create": "Hiraeth\Doctrine\SchemaCreateCommand",
		"orm:schema-tool:update": "Hiraeth\Doctrine\SchemaUpdateCommand",
		"orm:schema-tool:drop":   "Hiraeth\Doctrine\SchemaDropCommand",
	}

[fastroute]

	;
	; Patterns are strings which map to regular expressions for use with fastroute.  You can define
	; the pattern as the key and the regular expression it maps to as the value.
	;

	patterns = {
		"r": "[a-z][a-z0-9-/]+"
	}

	;
	; Transformers are used to transform matching URL parameters between their URL form and their
	; argument form.
	;

	transformers = {
		"r": "Hiraeth\Doctrine\FastRoute\RepositoryTransformer"
	}
