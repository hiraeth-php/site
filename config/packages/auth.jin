[application]

	;
	; Aliases enable you to inform the dependency injector which concrete class should be built
	; to provide for a type-hinted interface.  If the interface does not exist, a built in php
	; class alias will be generated as an alias for the class.
	;

	aliases = {

	}

	;
	; Delegates are mini-factories for the dependency injector.  They provide all the information
	; required to register with dependency injector as being capable of building a particular class
	; and contain all the requisite logic for building that class, including any configuration
	; settings logic.
	;

	delegates = [

	]

	;
	; Providers can be thought of as hooks which receive an object instance of a particular
	; interface once it has been created by the dependecy injector.  From here, it can call the
	; methods assured in that interface to conitnue configuring or setting up the instances.  Like
	; delegates, providers contain all the requisite information inside the class, so they merely
	; need to be registered.
	;

	providers = [
		"Hiraeth\Auth\ManagerProvider",
		"Hiraeth\Auth\ManagedInterfaceProvider"
	]

[auth]

	; Aliases enable to combination of multiple permitted actions into a single action.  The key is
	; the alias for the actions and the value is an array of actions which it also permits.

	aliases = {
	;	"manage": ["create", "read", "update", "delete"]
	}

	; Access control lists.  Each entry in the acls list is keyed by the role.  The value is then an
	; object containing permitted actions (arrays of actions) for the keyed targets.

	acls = {
	;	"admin": {
	;		"User" : ["manage"]
	;	}
	}

	; A list of services for permission checking in particular contexts.  These should implement
	; the AuthServiceInterface provided by the upstream auth package.

	services = {
	;	"context": "Auth\SomeService"
	}

[twig]

	;
	; Globals - A list of global variables to class names.  Instances will be constructed using the
	; depency injector / broker.
	;

	globals = {
		"auth": "Auth\Manager"
	}
