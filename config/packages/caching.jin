[application]

	;
	; Aliases enable you to inform the dependency injector which concrete class should be built
	; to provide for a type-hinted interface.  If the interface does not exist, a built in php
	; class alias will be generated as an alias for the class.
	;

	aliases = {

		;
		; This is a pseudo-class for our ItemPoolDelegate.  ItemPool is not real, but this creates
		; an alias in the broker, so when ItemPoolDelegate says it knows how to build ItemPool it
		; actually provides for Psr\Cache\ItemPoolInterface.
		;

		"Psr\Cache\CacheItemPoolInterface": "Hiraeth\Caching\ItemPool"
	}

	;
	; Delegates are mini-factories for the dependency injector.  They provide all the information
	; required to register with the dependency injector as being capable of building a particular
	; class and contain all the requisite logic for building that class.
	;

	delegates = [
		"Hiraeth\Caching\ItemPoolDelegate"
	]

	;
	; Providers are post-instantiation hooks.  Objects which implement their target interfaces will
	; be passed to them for additional setter injection or post-instantiation configuration.
	;

	providers = [

	]

[console]

	commands = [
		"Hiraeth\Caching\CachePurgeCommand"
	]
