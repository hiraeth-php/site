[application]

	;
	; Aliases enable you to inform the dependency injector which concrete class should be built
	; to provide for a type-hinted interface.  If the interface does not exist, a built in php
	; class alias will be generated as an alias for the class.
	;

	aliases = {
		"Psr\Http\Message\ResponseInterface": "Laminas\Diactoros\Response",
		"Psr\Http\Message\ServerRequestInterface": "Laminas\Diactoros\ServerRequest",
		"Psr\Http\Message\UploadedFileFactoryInterface": "Laminas\Diactoros\UploadedFileFactory",
		"Psr\Http\Message\ServerRequestFactoryInterface": "Laminas\Diactoros\ServerRequestFactory",
		"Psr\Http\Message\ResponseFactoryInterface": "Laminas\Diactoros\ResponseFactory",
		"Psr\Http\Message\RequestFactoryInterface": "Laminas\Diactoros\RequestFactory",
		"Psr\Http\Message\StreamFactoryInterface": "Laminas\Diactoros\StreamFactory",
	}

	;
	; Delegates are mini-factories for the dependency injector.  They provide all the information
	; required to register with the dependency injector as being capable of building a particular
	; class and contain all the requisite logic for building that class.
	;

	delegates = [
		"Hiraeth\Diactoros\ServerRequestDelegate",
		"Hiraeth\Diactoros\ResponseDelegate",
	]

	;
	; Providers are post-instantiation hooks.  Objects which implement their target interfaces will
	; be passed to them for additional setter injection or post-instantiation configuration.
	;

	providers = [

	]
